# puts "Name is #{ ENV['NAME'] } "
KEY_CHAIN_NAME = ENV["MATCH_KEYCHAIN_NAME"]
KEY_CHAIN_PASSWORD = ENV["MATCH_KEYCHAIN_PASSWORD"]
USER_ID = ENV["USER_ID"]
MATCH_GIT_BASIC_AUTHORIZATION = ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
default_platform(:ios)

platform :ios do

  before_all do |lane, options|
    create_temp_key_chain
  end
  
  # Creating temp keychain
  desc "Running ... create_temp_key_chain"
  lane :create_temp_key_chain do
    puts "Creating temp keychain with name #{KEY_CHAIN_NAME}"
    create_keychain(
      name: KEY_CHAIN_NAME,
      password: KEY_CHAIN_PASSWORD,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )
  end

  # Creating temp keychain
  desc "Running ... match_certificates"
  lane :match_and_sigin_certificates do
    puts "Running ... match_certificat #{KEY_CHAIN_NAME}"
    create_temp_key_chain
    match(
      keychain_name: KEY_CHAIN_NAME,
      keychain_password: KEY_CHAIN_PASSWORD,
      git_basic_authorization: MATCH_GIT_BASIC_AUTHORIZATION,
      readonly: true,
      verbose: true,
      skip_docs: true,
      verbose:true,
      git_basic_authorization:MATCH_GIT_BASIC_AUTHORIZATION
    )
    sync_code_signing(type: "adhoc", readonly: true)
  end


# Creating temp keychain
desc "Running ... archive_build"
lane :archive_build do
  puts "Running ... archive_build #{KEY_CHAIN_NAME}"
  match_and_sigin_certificates
  build_app(
    # app-store", "ad-hoc",  "enterprise", "development"]
      export_method:"ad-hoc",
      workspace: "ragnarok-app.xcworkspace",
      configuration: "Release",
      scheme: "QA",
      silent: true,
      clean: true,
      output_directory: "./builds",
      skip_codesigning: true,
      skip_build_archive: false,
      archive_path: "./builds",
      output_directory: "./builds",
      skip_package_ipa: false,
      export_team_id: 'BY9LWEKRD9'
  )
end

# delete_temp_key_chain
desc "Running ... delete_temp_key_chain"
lane :delete_temp_key_chain do
  puts "Deleting temp keychain with name #{KEY_CHAIN_NAME}"
  delete_keychain(name: "#{KEY_CHAIN_NAME}")
end

# delete_temp_key_chain
desc "Running ... oclint"
lane :run_oclint do
  oclint(
    compile_commands: "./fastlane/commands.json",    # The JSON compilation database, use xctool reporter "json-compilation-database"
    # exclude_regex: /Test.m/,    # Exclude all files matching this regex
    # report_type: "pmd",         # The type of the report (default: html)
    max_priority_1: 10,         # The max allowed number of priority 1 violations
    max_priority_2: 100,        # The max allowed number of priority 2 violations
    max_priority_3: 1000,       # The max allowed number of priority 3 violations
    thresholds: [     # Override the default behavior of rules
      "LONG_LINE=200",
      "LONG_METHOD=200"
    ],
    enable_rules: [   # List of rules to pick explicitly
      "DoubleNegative",
      "SwitchStatementsDon'TNeedDefaultWhenFullyCovered"
    ],
    disable_rules: ["GotoStatement"],     # List of rules to disable
    list_enabled_rules: true,   # List enabled rules
    enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report
    enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)
    allow_duplicated_violations: true,    # Allow duplicated violations in the OCLint report
    extra_arg: "-Wno-everything"# Additional argument to append to the compiler command line
  )
end



after_all do |lane, options|
  delete_temp_key_chain
end
end
